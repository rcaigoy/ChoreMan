//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ChoreMan.Entities
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class ChoremanEntities : DbContext
    {
        public ChoremanEntities()
            : base("name=ChoremanEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<AccountType> AccountTypes { get; set; }
        public virtual DbSet<ChoreList> ChoreLists { get; set; }
        public virtual DbSet<Chore> Chores { get; set; }
        public virtual DbSet<ChoreUser> ChoreUsers { get; set; }
        public virtual DbSet<IntervalType> IntervalTypes { get; set; }
        public virtual DbSet<RotationInterval> RotationIntervals { get; set; }
        public virtual DbSet<Session> Sessions { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<Message> Messages { get; set; }
    
        public virtual int Authenticate(string pUsername, string pPassword, ObjectParameter responseMessage)
        {
            var pUsernameParameter = pUsername != null ?
                new ObjectParameter("pUsername", pUsername) :
                new ObjectParameter("pUsername", typeof(string));
    
            var pPasswordParameter = pPassword != null ?
                new ObjectParameter("pPassword", pPassword) :
                new ObjectParameter("pPassword", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Authenticate", pUsernameParameter, pPasswordParameter, responseMessage);
        }
    
        public virtual int dbo_AddUser(string pUsername, string pEmail, string pPhone, string pFirstName, string pLastName, string pPassword, ObjectParameter responseMessage)
        {
            var pUsernameParameter = pUsername != null ?
                new ObjectParameter("pUsername", pUsername) :
                new ObjectParameter("pUsername", typeof(string));
    
            var pEmailParameter = pEmail != null ?
                new ObjectParameter("pEmail", pEmail) :
                new ObjectParameter("pEmail", typeof(string));
    
            var pPhoneParameter = pPhone != null ?
                new ObjectParameter("pPhone", pPhone) :
                new ObjectParameter("pPhone", typeof(string));
    
            var pFirstNameParameter = pFirstName != null ?
                new ObjectParameter("pFirstName", pFirstName) :
                new ObjectParameter("pFirstName", typeof(string));
    
            var pLastNameParameter = pLastName != null ?
                new ObjectParameter("pLastName", pLastName) :
                new ObjectParameter("pLastName", typeof(string));
    
            var pPasswordParameter = pPassword != null ?
                new ObjectParameter("pPassword", pPassword) :
                new ObjectParameter("pPassword", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("dbo_AddUser", pUsernameParameter, pEmailParameter, pPhoneParameter, pFirstNameParameter, pLastNameParameter, pPasswordParameter, responseMessage);
        }
    
        public virtual int UpdatePassword(string pUsername, string pPassword, ObjectParameter responseMessage)
        {
            var pUsernameParameter = pUsername != null ?
                new ObjectParameter("pUsername", pUsername) :
                new ObjectParameter("pUsername", typeof(string));
    
            var pPasswordParameter = pPassword != null ?
                new ObjectParameter("pPassword", pPassword) :
                new ObjectParameter("pPassword", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdatePassword", pUsernameParameter, pPasswordParameter, responseMessage);
        }
    }
}
